import numpy as np
from matplotlib import pyplot as plt
from matplotlib import colors
from matplotlib import rc
from classes import Tile, Marina, Boat

data = [(42.88771438598633, -76.71792602539062), (42.88469696044922, -76.71503448486328), (42.87065124511719, -76.71198272705078), (42.85745620727539, -76.71654510498047), (42.85218811035156, -76.70960998535156), (42.847415924072266, -76.71212768554688), (42.845130920410156, -76.70526885986328), (42.8369026184082, -76.70452880859375), (42.826194763183594, -76.709716796875), (42.82371139526367, -76.71565246582031), (42.819664001464844, -76.71763610839844), (42.81719970703125, -76.71669006347656), (42.808258056640625, -76.71961212158203), (42.80331039428711, -76.71803283691406), (42.79563903808594, -76.72579956054688), (42.79072570800781, -76.72704315185547), (42.775455474853516, -76.72041320800781), (42.76929473876953, -76.71773529052734), (42.75032043457031, -76.71280670166016), (42.72020721435547, -76.71924591064453), (42.71513748168945, -76.71610260009766), (42.694278717041016, -76.68535614013672), (42.679649353027344, -76.67413330078125), (42.663272857666016, -76.67256164550781), (42.6597785949707, -76.67222595214844), (42.60273742675781, -76.64254760742188), (42.598846435546875, -76.6389389038086), (42.595252990722656, -76.63101196289062), (42.58506774902344, -76.6253662109375), (42.57669448852539, -76.61341094970703), (42.567909240722656, -76.59736633300781), (42.56343078613281, -76.5855941772461), (42.56206512451172, -76.58368682861328), (42.55315017700195, -76.57123565673828), (42.550716400146484, -76.56314849853516), (42.544918060302734, -76.55713653564453), (42.539554595947266, -76.5549087524414), (42.5386962890625, -76.54391479492188), (42.53704071044922, -76.54122161865234), (42.512203216552734, -76.5244369506836), (42.50279998779297, -76.52078247070312), (42.49517059326172, -76.5213851928711), (42.47559356689453, -76.51180267333984), (42.47005844116211, -76.51204681396484), (42.46742248535156, -76.51699829101562), (42.46505355834961, -76.52136993408203), (42.46548843383789, -76.525146484375), (42.470394134521484, -76.53073120117188), (42.52267837524414, -76.55622100830078), (42.53410339355469, -76.57071685791016), (42.54359817504883, -76.59648132324219), (42.5518798828125, -76.6031265258789), (42.55235290527344, -76.6063003540039), (42.55561828613281, -76.62226867675781), (42.562461853027344, -76.63309478759766), (42.56525421142578, -76.63593292236328), (42.56706237792969, -76.64301300048828), (42.59879684448242, -76.67182159423828), (42.60773468017578, -76.67993927001953), (42.64558029174805, -76.69784545898438), (42.653785705566406, -76.69889831542969), (42.668399810791016, -76.70700073242188), (42.675209045410156, -76.7181625366211), (42.68825149536133, -76.73230743408203), (42.708152770996094, -76.74951171875), (42.72598648071289, -76.76493072509766), (42.744998931884766, -76.77581024169922), (42.7738037109375, -76.77828216552734), (42.80368423461914, -76.76871490478516), (42.813201904296875, -76.76087951660156), (42.81610870361328, -76.75218963623047), (42.82096481323242, -76.74653625488281), (42.8233642578125, -76.74374389648438), (42.83116912841797, -76.74068450927734), (42.86662673950195, -76.74337768554688), (42.878360748291016, -76.74989318847656), (42.88549041748047, -76.7498779296875), (42.90087127685547, -76.75686645507812), (42.9094352722168, -76.75609588623047), (42.92661666870117, -76.75048828125), (42.93044662475586, -76.7516098022461), (42.941280364990234, -76.76115417480469), (42.93892288208008, -76.74549865722656), (42.941646575927734, -76.74272155761719), (42.93515396118164, -76.73686981201172), (42.915767669677734, -76.7378158569336), (42.90726089477539, -76.73452758789062), (42.89956283569336, -76.7294692993164), (42.88771438598633, -76.71792602539062)]

data = [np.array(a) for a in data]

def dist(p1, p2):
  return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5
#distances from data[i] to data[i+1]
distances = [dist(data[i], data[i+1]) for i in range(len(data) - 1)]
distances.append(dist(data[0], data[-1]))
totalDistance = sum(distances)

def locToXY(loc, maxLoc):
  distanceLocation = loc / maxLoc * totalDistance
  pointLocation = 0
  for i in range(len(distances)):
    distanceLocation -= distances[i]
    if distanceLocation < 0:
      pointLocation = i + 1 + distanceLocation / (distances[i])
      break
  if pointLocation < len(data) - 1:
    intPtLoc = int(pointLocation)
    fracPtLoc = pointLocation - intPtLoc
    return data[intPtLoc] * (1 - fracPtLoc) + data[intPtLoc + 1] * fracPtLoc
  else:
    fracPtLoc = pointLocation - int(pointLocation)
    return data[-1] * (1 - fracPtLoc) + data[0] * fracPtLoc


font = {
        'weight' : 'bold',
        'size'   : 8}

rc('font', **font)
def plotLake(tiles, year):
  plt.gca().set_aspect('equal', adjustable='box')
  ts = np.array(range(len(tiles)))
  y = np.array(list(map(lambda t: locToXY(t, len(ts))[0], (ts))))
  x = np.array(list(map(lambda t: locToXY(t, len(ts))[1], (ts))))
  c = np.array(list(map(lambda t: (t.active+1)/1001, tiles)))
  plt.scatter(x, y, [1 for a in x], c=c, marker='.', cmap = "turbo", norm=colors.LogNorm())
  plt.axis('off')
  plt.title(f"Year 10")
  cbar = plt.colorbar()
  cbar.set_label('Proportion of Carrying Capacity', rotation=270, labelpad=5, fontsize = 8)
def show():
    plt.show()